generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  clerkId      String    @unique
  email        String    @unique
  name         String?
  profileImage String?
  bio          String?
  role         Role      @default(USER)
  posts        Post[]    @relation("AuthorPosts")
  comments     Comment[]
  likes        Like[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum Role {
  ADMIN
  EDITOR
  USER
}

model Post {
  id             String     @id @default(cuid())
  title          String
  content        String
  slug           String     @unique
  imageUrl       String?
  videoUrl       String? // For YouTube video
  isTrending     Boolean    @default(false)
  isEditorial    Boolean    @default(false)
  isFeatured     Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  author         User       @relation("AuthorPosts", fields: [authorId], references: [id])
  authorId       String
  categories     Category[] @relation("PostCategories") // ✅ many-to-many
  tags           Tag[]      @relation("PostTags")
  comments       Comment[]
  likes          Like[]
  seoTitle       String?
  seoDescription String?
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]   @relation("PostCategories") // ✅ many-to-many back reference
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
